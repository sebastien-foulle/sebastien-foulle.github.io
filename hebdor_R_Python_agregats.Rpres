Agregats sous R et Python dans Rstudio
======================================
author: Sebastien Foulle
date: 24/01/2020
width: 2600
height: 700

<!-- pour distiguer les chunks Python et leurs resultats de ceux de R -->

<style>
.python{
    background-color: gold !important;
}
</style>


Contenu du document
========================================================

Ce document est une presentation Rstudio, cf https://support.rstudio.com/hc/en-us/sections/200130218-R-Presentations. 

Ce format a moins de possibilites qu'un Rmarkdown (il faut par exemple exporter manuellement en html), mais il permet d'ecrire facilement sur deux colonnes.

On presente dans les quelques slides suivantes les operations d'agregation usuelles en R avec *dplyr*, et le script correspondant en Python avec *pandas*.

Prerequis pour produire ce fichier html avec Rstudio a partir de la source ".Rpres" :

- une distribution Python (Anaconda convient tres bien)
- le package R *reticulate* qui permet d'utiliser des objets R dans des chunks Python (syntaxe *r.mon_objet_r*) et inversement (syntaxe *py$mon_objet_python*)

Chargement des packages et donnees
========================================================

```{r packages_donnees}
library("reticulate")
# chemin vers l'executable python
# Sys.which("Python")
use_python("C:/Users/Sebastien/Anaconda3/python.exe", required = FALSE)

library("dplyr")
tips = reshape2::tips[75:78,-1]
```

```{python}
import numpy as np
import pandas as pd
```


Les donnees
====================================
<span style="padding-left: 47%"></span>`r fontawesome::fa('r-project', fill = 'blue', height = '60px')`
```{r}
tips
```

***
<span style="padding-left: 48%"></span>`r fontawesome::fa('python', fill = 'gold', height = '60px')`
```{python}
tips = r.tips; tips
```


Le type des donnees
====================================
<span style="padding-left: 47%"></span>`r fontawesome::fa('r-project', fill = 'blue', height = '60px')`

On a un champ numerique, un champ entier et quatre facteurs
```{r}
str(tips)
```

***
<span style="padding-left: 48%"></span>`r fontawesome::fa('python', fill = 'gold', height = '60px')`

On a un champ numerique, un champ entier et quatre categories *pandas*
```{python}
tips.info()
```


Agregats simples
====================================
<span style="padding-left: 47%"></span>`r fontawesome::fa('r-project', fill = 'blue', height = '60px')`

```{r}
tips %>% summarise(moy = mean(tip))
```

***
<span style="padding-left: 48%"></span>`r fontawesome::fa('python', fill = 'gold', height = '60px')`
```{python}
tips[["tip"]].mean()
```


Agregats simples pour toutes les colonnes numeriques
====================================
<span style="padding-left: 47%"></span>`r fontawesome::fa('r-project', fill = 'blue', height = '60px')`

```{r}
tips %>% summarise_if(is.numeric, mean)
```

***
<span style="padding-left: 48%"></span>`r fontawesome::fa('python', fill = 'gold', height = '60px')`
```{python}
tips.mean()
```


Application : % de valeurs manquantes par colonne
====================================
<span style="padding-left: 47%"></span>`r fontawesome::fa('r-project', fill = 'blue', height = '60px')`

```{r}
tips2 = tips; tips2[1,1] = NA;
# en R base : colMeans(is.na(tips2))
is.na(tips2) %>% as.data.frame %>% summarise_all(mean)
```

***
<span style="padding-left: 48%"></span>`r fontawesome::fa('python', fill = 'gold', height = '60px')`
```{python}
tips2 = r.tips2;
tips2.isna().mean().reset_index(name = "pct_na")
```


Agregats par groupe
====================================
<span style="padding-left: 47%"></span>`r fontawesome::fa('r-project', fill = 'blue', height = '60px')`

On voit `2.62` au lieu de `2.625` car les *tibble* affichent 3 chiffres significatifs par defaut. Solutions : *options(pillar.sigfig = 7)* ou en rajoutant a la fin *%>% as.data.frame*.
```{r}

tips %>% group_by(sex,smoker) %>% summarise(moy=mean(tip))
```

***
<span style="padding-left: 48%"></span>`r fontawesome::fa('python', fill = 'gold', height = '60px')`
```{python}
tips.groupby(["sex", "smoker"], observed = True)["tip"].mean().reset_index(name = "moy")
```


Application : table de contingence
====================================
<span style="padding-left: 47%"></span>`r fontawesome::fa('r-project', fill = 'blue', height = '60px')`

```{r}
# en bref : tips %>% count(sex, smoker, name = "freq")
tips %>% group_by(sex,smoker) %>% summarise(freq =n())
```

***
<span style="padding-left: 48%"></span>`r fontawesome::fa('python', fill = 'gold', height = '60px')`
```{python}
tips.groupby(["sex", "smoker"], observed = True).size().reset_index(name = "freq")
```


Agregats par groupe ajoutes dans la table initiale
====================================
<span style="padding-left: 47%"></span>`r fontawesome::fa('r-project', fill = 'blue', height = '60px')`

```{r}
options(pillar.sigfig = 7)
tips %>% group_by(sex,smoker) %>% mutate(moy=mean(tip))
```

***
<span style="padding-left: 48%"></span>`r fontawesome::fa('python', fill = 'gold', height = '60px')`
```{python}
tips["moy"] = tips.groupby(["sex", "smoker"], observed = True)["tip"].transform("mean");tips
```


```{python, eval=TRUE, echo=FALSE}
tips.drop(columns = "moy", inplace = True)
```


Application : on filtre sur les pourboires au-dessus de la moyenne
====================================
<span style="padding-left: 47%"></span>`r fontawesome::fa('r-project', fill = 'blue', height = '60px')`

```{r}
tips %>% mutate(moy = mean(tip)) %>% filter(tip > moy)
```

***
<span style="padding-left: 48%"></span>`r fontawesome::fa('python', fill = 'gold', height = '60px')`
```{python}
tips["zero"] = 0;
tips["moy"]=tips.groupby("zero")["tip"].transform("mean")
tips.query('tip > moy')
```


```{python, eval=TRUE, echo=FALSE}
tips.drop(columns = ["zero", "moy"], inplace = True)
```


Variante : agregats par groupe avec dictionnaire + mapping
====================================
<span style="padding-left: 47%"></span>`r fontawesome::fa('r-project', fill = 'blue', height = '60px')` 

En R on passe par un vecteur avec noms 
```{r}
vecteur = tips %>% group_by(day) %>% summarise(moy = mean(tip)) %>% tibble::deframe();vecteur
tips["moy"] = vecteur[as.character(tips$day)];tips
```

***
<span style="padding-left: 48%"></span>`r fontawesome::fa('python', fill = 'gold', height = '60px')` 

En Python on utilise un dictionnaire
```{python}
dico = tips.groupby("day", observed = True).tip.mean().to_dict();dico
tips["moy"] = tips.day.map(dico); tips
```
